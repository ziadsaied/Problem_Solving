int main() {
    int n, numbers[200];    // max expected size

    cin >> n; // Read the number of elements
    for (int i = 0; i < n; ++i)
        cin >> numbers[i];  // Read the elements into the array

    int maximum_idx = 0;   // Index of the maximum element
    for (int i = 1; i < n; ++i)
        if (numbers[maximum_idx] < numbers[i])
            maximum_idx = i;

    int max1 = numbers[maximum_idx]; // First maximum value
    numbers[maximum_idx] = -1000000; // Set this max value to a very low number

    maximum_idx = 0;    // Reset index for finding the second maximum
    for (int i = 1; i < n; ++i)
        if (numbers[maximum_idx] < numbers[i])
            maximum_idx = i;

    int max2 = numbers[maximum_idx]; // Second maximum value
    cout << max1 << " " << max2;
    return 0;
}
################################################################################
SMART WAY TO DO IT:

#include<iostream>
using namespace std;
int main() {

	int arr[200], n;
	cin>>n;
	for (int i = 0; i < n; ++i)
		cin>>arr[i];
	
	int max1 ,max2;
	if(arr[0]>arr[1])
		max1=arr[0], max2= arr[1];
	else
		max1=arr[1], max2= arr[0];

	for (int i=2; i<n;++i) {
		if(arr[i]>=max1)
			max2=max1, max1=arr[i];
		else if (arr[i]>=max2)
			max2=arr[i];
	}
	cout<<max1<<" "<<max2;

	return 0;
}

